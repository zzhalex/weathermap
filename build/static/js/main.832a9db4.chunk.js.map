{"version":3,"sources":["Components/WeatherCard.js","Components/SubChart.js","Components/SubTable.js","Components/WeatherTable.js","Components/List.js","Components/Home.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","WeatherCard","data","props","Fragment","style","width","marginTop","height","avatar","src","icon","title","name","description","weather","temp","className","SubChart","console","log","config","xField","yField","point","size","shape","label","fill","SubTable","itemLayout","dataSource","renderItem","item","Item","date","WeatherTable","useState","switchVal","setControl","tableOrChart","checkedChildren","unCheckedChildren","defaultChecked","onChange","e","styleList","margin","SavedList","list","setlist","useEffect","axios","get","then","res","grid","gutter","column","Home","inputEl","useRef","card","setCard","table","setTable","ref","type","placeholder","onClick","city","current","value","params","forecastData","About","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.832a9db4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Avatar } from \"antd\";\n\nconst { Meta } = Card;\n\nfunction WeatherCard(data) {\n  let content =\n    data.props != null ? (\n      <React.Fragment>\n        <h3>Current Weather</h3>\n        <Card style={{ width: 300, marginTop: 16, height: 140 }}>\n          <Meta\n            avatar={\n              <Avatar\n                src={\n                  \" http://openweathermap.org/img/wn/\" +\n                  data.props.icon +\n                  \"@2x.png\"\n                }\n              />\n            }\n            title={data.props.name}\n            description={data.props.weather}\n          />\n          <p>{data.props.temp}°C</p>\n        </Card>\n      </React.Fragment>\n    ) : (\n      <div className=\"notifyBox\">\n        Please input the name of city to search the weather.\n      </div>\n    );\n  return content;\n}\n\nexport default WeatherCard;\n","import React from \"react\";\nimport { Line } from \"@ant-design/charts\";\n\nfunction SubChart(props) {\n  console.log(props);\n  let data = props.data;\n  const config = {\n    data,\n    height: 400,\n    width: 600,\n    xField: \"date\",\n    yField: \"temp\",\n    point: {\n      size: 5,\n      shape: \"diamond\",\n    },\n    label: {\n      style: {\n        fill: \"#aaa\",\n      },\n    },\n  };\n  return <Line {...config} />;\n}\n\nexport default SubChart;\n","import React from \"react\";\nimport { List, Avatar } from \"antd\";\n\nfunction SubTable(props) {\n  return (\n    <List\n      style={{ width: 600 }}\n      itemLayout=\"horizontal\"\n      dataSource={props.data}\n      renderItem={(item) => (\n        <List.Item>\n          <List.Item.Meta\n            avatar={\n              <Avatar\n                src={` http://openweathermap.org/img/wn/${item.icon}.png`}\n              />\n            }\n            title={`${item.date}`}\n            description={`${item.temp} °C`}\n          />\n          <div>{item.weather}</div>\n        </List.Item>\n      )}\n    />\n  );\n}\n\nexport default SubTable;\n","import React, { useState } from \"react\";\nimport { Switch } from \"antd\";\nimport SubChart from \"./SubChart\";\nimport SubTable from \"./SubTable\";\n\nfunction WeatherTable(data) {\n  const [switchVal, setControl] = useState(true);\n  const switchControl = (e) => {\n    console.log(e);\n    setControl(e);\n  };\n\n  let tableOrChart = switchVal ? (\n    <SubTable data={data.props} />\n  ) : (\n    <SubChart data={data.props} />\n  );\n  let content =\n    data.props == null ? (\n      <div className=\"notifyBox\"></div>\n    ) : (\n      <React.Fragment>\n        <h3>7 Days Forecast</h3>{\" \"}\n        <Switch\n          checkedChildren=\"Table\"\n          unCheckedChildren=\"Chart\"\n          defaultChecked\n          onChange={switchControl}\n        />\n        {tableOrChart}\n      </React.Fragment>\n    );\n\n  return content;\n}\n\nexport default WeatherTable;\n","import React, { useState, useEffect } from \"react\";\nimport { List, Card, Avatar } from \"antd\";\nimport {} from \"antd\";\n\nimport axios from \"axios\";\nconst styleList = {\n  margin: \"12px\",\n};\nconst { Meta } = Card;\n\nfunction SavedList() {\n  const [list, setlist] = useState([]);\n  useEffect(() => {\n    axios.get(\"/defweather\").then(function (res) {\n      console.log(res.data);\n      setlist(res.data);\n    });\n  }, []);\n  return (\n    <List\n      style={styleList}\n      grid={{ gutter: 16, column: 4 }}\n      dataSource={list}\n      renderItem={(item) => (\n        <List.Item>\n          <Card title={item.title}>\n            <Meta\n              avatar={\n                <Avatar\n                  src={\n                    \" http://openweathermap.org/img/wn/\" + item.icon + \"@2x.png\"\n                  }\n                />\n              }\n              title={item.name}\n              description={item.weather}\n            />\n            <p>{item.temp}°C</p>\n          </Card>\n        </List.Item>\n      )}\n    />\n  );\n}\n\nexport default SavedList;\n","import React, { useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherCard from \"./WeatherCard\";\nimport WeatherTable from \"./WeatherTable\";\nimport SavedList from \"./List\";\nfunction Home() {\n  const inputEl = useRef(null);\n  const [card, setCard] = useState(null);\n  const [table, setTable] = useState(null);\n  const cityQuery = () => {\n    let city = inputEl.current.value;\n    axios\n      .get(\"/weather\", {\n        params: {\n          city: city,\n        },\n      })\n      .then(function (res) {\n        console.log(res.data);\n        setCard(res.data);\n        setTable(res.data.forecastData.list);\n      });\n  };\n  return (\n    <React.Fragment>\n      <div className=\"searchBar\">\n        <div className=\"search-input-container\">\n          <input\n            className=\"search-input\"\n            ref={inputEl}\n            type=\"search\"\n            placeholder=\"Search...\"\n          />\n          <span className=\"material-icons\" onClick={cityQuery}>\n            search\n          </span>\n        </div>\n      </div>\n      <SavedList />\n      <div className=\"homeBody\">\n        <div className=\"homeCard\">\n          {\" \"}\n          <WeatherCard props={card} />\n        </div>\n        <div className=\"homeTable\">\n          {\" \"}\n          <WeatherTable props={table} />\n        </div>\n      </div>\n      \n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction About() {\n  return <p>React, Antd,recharts, axios, express, OpenMapAPI</p>;\n}\n\nexport default About;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport About from \"./Components/About\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul>\n      </nav>\n\n      {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}