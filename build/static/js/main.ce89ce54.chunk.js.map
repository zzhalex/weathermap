{"version":3,"sources":["Components/WeatherCard.js","Components/SubChart.js","Components/WeatherTable.js","Components/Home.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","WeatherCard","data","props","Fragment","style","width","marginTop","height","avatar","src","icon","title","name","description","weather","temp","className","SubChart","console","log","margin","top","right","left","bottom","dataKey","stroke","type","imgStyle","tableStyle","WeatherTable","useState","switchVal","setControl","columns","dataIndex","key","render","t","tableOrChart","dataSource","checkedChildren","unCheckedChildren","defaultChecked","onChange","e","Home","inputEl","useRef","card","setCard","table","setTable","ref","placeholder","onClick","city","current","value","axios","get","params","then","res","forecastData","list","About","App","to","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce89ce54.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Avatar } from \"antd\";\n\nconst { Meta } = Card;\n\nfunction WeatherCard(data) {\n  let content =\n    data.props != null ? (\n      <React.Fragment>\n        <h3>Current Weather</h3>\n        <Card style={{ width: 300, marginTop: 16, height: 140 }}>\n          <Meta\n            avatar={\n              <Avatar\n                src={\n                  \" http://openweathermap.org/img/wn/\" +\n                  data.props.icon +\n                  \"@2x.png\"\n                }\n              />\n            }\n            title={data.props.name}\n            description={data.props.weather}\n          />\n          <p>{data.props.temp}°C</p>\n        </Card>\n      </React.Fragment>\n    ) : (\n      <div className=\"notifyBox\">\n        Please input the name of city to search the weather.\n      </div>\n    );\n  return content;\n}\n\nexport default WeatherCard;\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nfunction SubChart(data) {\n  console.log(data);\n  return (\n    <LineChart\n      width={730}\n      height={250}\n      data={data.props}\n      margin={{ top: 50, right: 30, left: 20, bottom: 5 }}\n    >\n      <XAxis dataKey=\"date\" />\n      <YAxis dataKey=\"temp\" />\n      <Tooltip />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line type=\"monotone\" dataKey=\"temp\" stroke=\"#ff7300\" />\n    </LineChart>\n  );\n}\n\nexport default SubChart;\n","import React, { useState, useRef } from \"react\";\nimport { Table, Tag, Space } from \"antd\";\nimport { Switch } from \"antd\";\nimport SubChart from \"./SubChart\";\n\nconst imgStyle = {\n  width: \"32px\",\n  height: \"32px\",\n};\nconst tableStyle = {\n  height: \"400px\",\n};\nfunction WeatherTable(data) {\n  const [switchVal, setControl] = useState(true);\n  const switchControl = (e) => {\n    console.log(e);\n    setControl(e);\n  };\n  const columns = [\n    { title: \"Date\", dataIndex: \"date\", key: \"date\" },\n    {\n      title: \"Temperature\",\n      dataIndex: \"temp\",\n      key: \"temp\",\n      render: (t) => {\n        return t + \"°C\";\n      },\n    },\n    {\n      title: \"Weather\",\n      dataIndex: \"weather\",\n      key: \"weather\",\n    },\n    {\n      title: \"\",\n      dataIndex: \"icon\",\n      key: \"icon\",\n      render: (icon) => {\n        return (\n          <img\n            style={imgStyle}\n            src={\" http://openweathermap.org/img/wn/\" + icon + \".png\"}\n          />\n        );\n      },\n    },\n  ];\n\n  let tableOrChart = switchVal ? (\n    <Table style={tableStyle} columns={columns} dataSource={data.props} />\n  ) : (\n    <SubChart props={data.props} />\n  );\n  let content =\n    data.props == null ? (\n      <div className=\"notifyBox\"></div>\n    ) : (\n      <React.Fragment>\n        <h3>7 Days Forecast</h3>{\" \"}\n        <Switch\n          checkedChildren=\"Table\"\n          unCheckedChildren=\"Chart\"\n          defaultChecked\n          onChange={switchControl}\n        />\n        {tableOrChart}\n      </React.Fragment>\n    );\n\n  return content;\n}\n\nexport default WeatherTable;\n","import React, { useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherCard from \"./WeatherCard\";\nimport WeatherTable from \"./WeatherTable\";\nimport SubChart from \"./SubChart\";\n\nfunction Home() {\n  const inputEl = useRef(null);\n  const [card, setCard] = useState(null);\n  const [table, setTable] = useState(null);\n  const cityQuery = () => {\n    let city = inputEl.current.value;\n    axios\n      .get(\"/weather\", {\n        params: {\n          city: city,\n        },\n      })\n      .then(function (res) {\n        console.log(res.data);\n        setCard(res.data);\n        setTable(res.data.forecastData.list);\n      });\n  };\n  return (\n    <React.Fragment>\n      <div className=\"searchBar\">\n        <div className=\"search-input-container\">\n          <input\n            className=\"search-input\"\n            ref={inputEl}\n            type=\"search\"\n            placeholder=\"Search...\"\n          />\n          <span className=\"material-icons\" onClick={cityQuery}>\n            search\n          </span>\n        </div>\n      </div>\n      <div className=\"homeBody\">\n        <div className=\"homeCard\">\n          {\" \"}\n          <WeatherCard props={card} />\n        </div>\n        <div className=\"homeTable\">\n          {\" \"}\n          <WeatherTable props={table} />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction About() {\n  return <p>React, Antd,recharts, axios, express, OpenMapAPI</p>;\n}\n\nexport default About;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport About from \"./Components/About\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul>\n      </nav>\n\n      {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}